import timeit
import matplotlib.pyplot as plt

def print_subset_sum(i, n, _set, target_sum, subset):
    global flag
    if target_sum == 0:
        flag = True
        return
    if i == n:
        return
 
    print_subset_sum(i + 1, n, _set, target_sum, subset)
 
    if _set[i] <= target_sum:
        subset.append(_set[i])
        print_subset_sum(i + 1, n, _set, target_sum - _set[i], subset)
        subset.pop()
 
if __name__ == "__main__":
    num_integers_list = list(range(1, 21))  # Number of integers from 1 to 20
    time_taken_list = []
    num_iterations = 10  # Number of iterations
    
    for num_integers in num_integers_list:
        arr = list(range(1, num_integers + 1))
        
        total_time = 0
        for _ in range(num_iterations):
            start_time = timeit.default_timer()  # Start timer
            flag = False
            print_subset_sum(0, num_integers, arr, num_integers, [])  
            end_time = timeit.default_timer()  # End timer
            total_time += (end_time - start_time)
        
        time_taken_list.append(total_time)  # Append total time to list

    plt.plot(num_integers_list, time_taken_list, marker='o')
    plt.xlabel('Number of Integers')
    plt.ylabel('Time Taken (s)')
    plt.title('Time Taken for Subset Sum Problem as a Function of Number of Integers')
    plt.grid(True)
    plt.show()
