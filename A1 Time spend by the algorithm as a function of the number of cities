import timeit
import matplotlib.pyplot as plt
from itertools import permutations

def travellingSalesmanProblem(graph, s):
    vertex = []
    for i in range(len(graph)):
        if i != s:
            vertex.append(i)

    min_path = float('inf')
    next_permutation = permutations(vertex)
    total_time = 0
    num_iterations = 10  # Number of iterations for averaging time
    for _ in range(num_iterations):
        start_time = timeit.default_timer()  # Start timer
        for i in next_permutation:
            current_pathweight = 0
            k = s
            for j in i:
                current_pathweight += graph[k][j]
                k = j
            current_pathweight += graph[k][s]
            min_path = min(min_path, current_pathweight)
        end_time = timeit.default_timer()  # End timer
        total_time += (end_time - start_time)
    return total_time / num_iterations

if __name__ == "__main__":
    num_cities_list = list(range(1, 11))  # Number of cities from 1 to 10
    time_taken_list = []

    s = 0

    for num_cities in num_cities_list:
        
        graph = [[0, 10, 15, 20], [10, 0, 35, 25], 
                 [15, 35, 0, 30], [20, 25, 30, 0]] 
        
        time_taken_list.append(travellingSalesmanProblem(graph[:num_cities], s))

    plt.plot(num_cities_list, time_taken_list, marker='o')
    plt.xlabel('Number of Cities')
    plt.ylabel('Time Taken (s)')
    plt.title('Time Taken for TSP as a Function of Number of Cities')
    plt.grid(True)
    plt.show()
